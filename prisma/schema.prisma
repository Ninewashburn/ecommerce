// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle utilisateur
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
}

enum Role {
  ADMIN
  CUSTOMER
}

// Modèle adresse
model Address {
  id            Int       @id @default(autoincrement())
  street        String
  city          String
  state         String?
  postalCode    String
  country       String
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
}

// Modèle catégorie
model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  slug          String    @unique
  description   String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  products      Product[]
  parentId      Int?
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
}

// Modèle produit
model Product {
  id            Int       @id @default(autoincrement())
  name          String
  slug          String    @unique
  description   String?
  price         Decimal   @db.Decimal(10, 2)
  comparePrice  Decimal?  @db.Decimal(10, 2)
  sku           String?   @unique
  inventory     Int       @default(0)
  isVisible     Boolean   @default(true)
  isNew         Boolean   @default(false)
  isFeatured    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  categoryId    Int
  category      Category  @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  orderItems    OrderItem[]
  reviews       Review[]
}

// Modèle image de produit
model ProductImage {
  id            Int       @id @default(autoincrement())
  url           String
  alt           String?
  position      Int       @default(0)
  
  productId     Int
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Modèle commande
model Order {
  id            Int       @id @default(autoincrement())
  orderNumber   String?   @unique
  status        OrderStatus @default(PENDING)
  total         Decimal   @db.Decimal(10, 2)
  subtotal      Decimal   @db.Decimal(10, 2)
  tax           Decimal?  @db.Decimal(10, 2)
  shipping      Decimal?  @db.Decimal(10, 2)
  shippingAddress String?
  shippingStreet String?
  shippingCity   String?
  shippingState  String?
  shippingPostalCode String?
  shippingCountry String?
  paymentMethod String?
  paymentId     String?
  emailSent     Boolean   @default(false)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        Int
  user          User      @relation(fields: [userId], references: [id])
  addressId     Int?
  address       Address?  @relation(fields: [addressId], references: [id])
  items         OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Modèle élément de commande
model OrderItem {
  id            Int       @id @default(autoincrement())
  quantity      Int
  price         Decimal   @db.Decimal(10, 2)
  
  orderId       Int
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId     Int
  product       Product   @relation(fields: [productId], references: [id])
}

// Modèle avis
model Review {
  id            Int       @id @default(autoincrement())
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId     Int
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}
